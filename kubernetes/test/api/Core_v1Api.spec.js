/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.6.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KubernetesJsClient);
  }
}(this, function(expect, KubernetesJsClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KubernetesJsClient.Core_v1Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Core_v1Api', function() {
    describe('connectDeleteNamespacedPodProxy', function() {
      it('should call connectDeleteNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectDeleteNamespacedPodProxy
        //instance.connectDeleteNamespacedPodProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectDeleteNamespacedPodProxyWithPath', function() {
      it('should call connectDeleteNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectDeleteNamespacedPodProxyWithPath
        //instance.connectDeleteNamespacedPodProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectDeleteNamespacedServiceProxy', function() {
      it('should call connectDeleteNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectDeleteNamespacedServiceProxy
        //instance.connectDeleteNamespacedServiceProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectDeleteNamespacedServiceProxyWithPath', function() {
      it('should call connectDeleteNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectDeleteNamespacedServiceProxyWithPath
        //instance.connectDeleteNamespacedServiceProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectDeleteNodeProxy', function() {
      it('should call connectDeleteNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectDeleteNodeProxy
        //instance.connectDeleteNodeProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectDeleteNodeProxyWithPath', function() {
      it('should call connectDeleteNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectDeleteNodeProxyWithPath
        //instance.connectDeleteNodeProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectGetNamespacedPodAttach', function() {
      it('should call connectGetNamespacedPodAttach successfully', function(done) {
        //uncomment below and update the code to test connectGetNamespacedPodAttach
        //instance.connectGetNamespacedPodAttach(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectGetNamespacedPodExec', function() {
      it('should call connectGetNamespacedPodExec successfully', function(done) {
        //uncomment below and update the code to test connectGetNamespacedPodExec
        //instance.connectGetNamespacedPodExec(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectGetNamespacedPodPortforward', function() {
      it('should call connectGetNamespacedPodPortforward successfully', function(done) {
        //uncomment below and update the code to test connectGetNamespacedPodPortforward
        //instance.connectGetNamespacedPodPortforward(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectGetNamespacedPodProxy', function() {
      it('should call connectGetNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectGetNamespacedPodProxy
        //instance.connectGetNamespacedPodProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectGetNamespacedPodProxyWithPath', function() {
      it('should call connectGetNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectGetNamespacedPodProxyWithPath
        //instance.connectGetNamespacedPodProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectGetNamespacedServiceProxy', function() {
      it('should call connectGetNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectGetNamespacedServiceProxy
        //instance.connectGetNamespacedServiceProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectGetNamespacedServiceProxyWithPath', function() {
      it('should call connectGetNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectGetNamespacedServiceProxyWithPath
        //instance.connectGetNamespacedServiceProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectGetNodeProxy', function() {
      it('should call connectGetNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectGetNodeProxy
        //instance.connectGetNodeProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectGetNodeProxyWithPath', function() {
      it('should call connectGetNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectGetNodeProxyWithPath
        //instance.connectGetNodeProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectHeadNamespacedPodProxy', function() {
      it('should call connectHeadNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectHeadNamespacedPodProxy
        //instance.connectHeadNamespacedPodProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectHeadNamespacedPodProxyWithPath', function() {
      it('should call connectHeadNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectHeadNamespacedPodProxyWithPath
        //instance.connectHeadNamespacedPodProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectHeadNamespacedServiceProxy', function() {
      it('should call connectHeadNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectHeadNamespacedServiceProxy
        //instance.connectHeadNamespacedServiceProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectHeadNamespacedServiceProxyWithPath', function() {
      it('should call connectHeadNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectHeadNamespacedServiceProxyWithPath
        //instance.connectHeadNamespacedServiceProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectHeadNodeProxy', function() {
      it('should call connectHeadNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectHeadNodeProxy
        //instance.connectHeadNodeProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectHeadNodeProxyWithPath', function() {
      it('should call connectHeadNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectHeadNodeProxyWithPath
        //instance.connectHeadNodeProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectOptionsNamespacedPodProxy', function() {
      it('should call connectOptionsNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectOptionsNamespacedPodProxy
        //instance.connectOptionsNamespacedPodProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectOptionsNamespacedPodProxyWithPath', function() {
      it('should call connectOptionsNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectOptionsNamespacedPodProxyWithPath
        //instance.connectOptionsNamespacedPodProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectOptionsNamespacedServiceProxy', function() {
      it('should call connectOptionsNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectOptionsNamespacedServiceProxy
        //instance.connectOptionsNamespacedServiceProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectOptionsNamespacedServiceProxyWithPath', function() {
      it('should call connectOptionsNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectOptionsNamespacedServiceProxyWithPath
        //instance.connectOptionsNamespacedServiceProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectOptionsNodeProxy', function() {
      it('should call connectOptionsNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectOptionsNodeProxy
        //instance.connectOptionsNodeProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectOptionsNodeProxyWithPath', function() {
      it('should call connectOptionsNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectOptionsNodeProxyWithPath
        //instance.connectOptionsNodeProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPostNamespacedPodAttach', function() {
      it('should call connectPostNamespacedPodAttach successfully', function(done) {
        //uncomment below and update the code to test connectPostNamespacedPodAttach
        //instance.connectPostNamespacedPodAttach(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPostNamespacedPodExec', function() {
      it('should call connectPostNamespacedPodExec successfully', function(done) {
        //uncomment below and update the code to test connectPostNamespacedPodExec
        //instance.connectPostNamespacedPodExec(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPostNamespacedPodPortforward', function() {
      it('should call connectPostNamespacedPodPortforward successfully', function(done) {
        //uncomment below and update the code to test connectPostNamespacedPodPortforward
        //instance.connectPostNamespacedPodPortforward(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPostNamespacedPodProxy', function() {
      it('should call connectPostNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectPostNamespacedPodProxy
        //instance.connectPostNamespacedPodProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPostNamespacedPodProxyWithPath', function() {
      it('should call connectPostNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectPostNamespacedPodProxyWithPath
        //instance.connectPostNamespacedPodProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPostNamespacedServiceProxy', function() {
      it('should call connectPostNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectPostNamespacedServiceProxy
        //instance.connectPostNamespacedServiceProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPostNamespacedServiceProxyWithPath', function() {
      it('should call connectPostNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectPostNamespacedServiceProxyWithPath
        //instance.connectPostNamespacedServiceProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPostNodeProxy', function() {
      it('should call connectPostNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectPostNodeProxy
        //instance.connectPostNodeProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPostNodeProxyWithPath', function() {
      it('should call connectPostNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectPostNodeProxyWithPath
        //instance.connectPostNodeProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPutNamespacedPodProxy', function() {
      it('should call connectPutNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectPutNamespacedPodProxy
        //instance.connectPutNamespacedPodProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPutNamespacedPodProxyWithPath', function() {
      it('should call connectPutNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectPutNamespacedPodProxyWithPath
        //instance.connectPutNamespacedPodProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPutNamespacedServiceProxy', function() {
      it('should call connectPutNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectPutNamespacedServiceProxy
        //instance.connectPutNamespacedServiceProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPutNamespacedServiceProxyWithPath', function() {
      it('should call connectPutNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectPutNamespacedServiceProxyWithPath
        //instance.connectPutNamespacedServiceProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPutNodeProxy', function() {
      it('should call connectPutNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectPutNodeProxy
        //instance.connectPutNodeProxy(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPutNodeProxyWithPath', function() {
      it('should call connectPutNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectPutNodeProxyWithPath
        //instance.connectPutNodeProxyWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespace', function() {
      it('should call createNamespace successfully', function(done) {
        //uncomment below and update the code to test createNamespace
        //instance.createNamespace(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedBinding', function() {
      it('should call createNamespacedBinding successfully', function(done) {
        //uncomment below and update the code to test createNamespacedBinding
        //instance.createNamespacedBinding(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedBindingBinding', function() {
      it('should call createNamespacedBindingBinding successfully', function(done) {
        //uncomment below and update the code to test createNamespacedBindingBinding
        //instance.createNamespacedBindingBinding(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedConfigMap', function() {
      it('should call createNamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test createNamespacedConfigMap
        //instance.createNamespacedConfigMap(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedEndpoints', function() {
      it('should call createNamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test createNamespacedEndpoints
        //instance.createNamespacedEndpoints(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedEvent', function() {
      it('should call createNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test createNamespacedEvent
        //instance.createNamespacedEvent(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedEvictionEviction', function() {
      it('should call createNamespacedEvictionEviction successfully', function(done) {
        //uncomment below and update the code to test createNamespacedEvictionEviction
        //instance.createNamespacedEvictionEviction(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedLimitRange', function() {
      it('should call createNamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test createNamespacedLimitRange
        //instance.createNamespacedLimitRange(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedPersistentVolumeClaim', function() {
      it('should call createNamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test createNamespacedPersistentVolumeClaim
        //instance.createNamespacedPersistentVolumeClaim(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedPod', function() {
      it('should call createNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test createNamespacedPod
        //instance.createNamespacedPod(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedPodTemplate', function() {
      it('should call createNamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test createNamespacedPodTemplate
        //instance.createNamespacedPodTemplate(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedReplicationController', function() {
      it('should call createNamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test createNamespacedReplicationController
        //instance.createNamespacedReplicationController(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedResourceQuota', function() {
      it('should call createNamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test createNamespacedResourceQuota
        //instance.createNamespacedResourceQuota(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedSecret', function() {
      it('should call createNamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test createNamespacedSecret
        //instance.createNamespacedSecret(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedService', function() {
      it('should call createNamespacedService successfully', function(done) {
        //uncomment below and update the code to test createNamespacedService
        //instance.createNamespacedService(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedServiceAccount', function() {
      it('should call createNamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test createNamespacedServiceAccount
        //instance.createNamespacedServiceAccount(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNode', function() {
      it('should call createNode successfully', function(done) {
        //uncomment below and update the code to test createNode
        //instance.createNode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPersistentVolume', function() {
      it('should call createPersistentVolume successfully', function(done) {
        //uncomment below and update the code to test createPersistentVolume
        //instance.createPersistentVolume(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespace', function() {
      it('should call deleteCollectionNamespace successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespace
        //instance.deleteCollectionNamespace(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedConfigMap', function() {
      it('should call deleteCollectionNamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedConfigMap
        //instance.deleteCollectionNamespacedConfigMap(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedEndpoints', function() {
      it('should call deleteCollectionNamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedEndpoints
        //instance.deleteCollectionNamespacedEndpoints(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedEvent', function() {
      it('should call deleteCollectionNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedEvent
        //instance.deleteCollectionNamespacedEvent(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedLimitRange', function() {
      it('should call deleteCollectionNamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedLimitRange
        //instance.deleteCollectionNamespacedLimitRange(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedPersistentVolumeClaim', function() {
      it('should call deleteCollectionNamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedPersistentVolumeClaim
        //instance.deleteCollectionNamespacedPersistentVolumeClaim(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedPod', function() {
      it('should call deleteCollectionNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedPod
        //instance.deleteCollectionNamespacedPod(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedPodTemplate', function() {
      it('should call deleteCollectionNamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedPodTemplate
        //instance.deleteCollectionNamespacedPodTemplate(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedReplicationController', function() {
      it('should call deleteCollectionNamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedReplicationController
        //instance.deleteCollectionNamespacedReplicationController(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedResourceQuota', function() {
      it('should call deleteCollectionNamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedResourceQuota
        //instance.deleteCollectionNamespacedResourceQuota(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedSecret', function() {
      it('should call deleteCollectionNamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedSecret
        //instance.deleteCollectionNamespacedSecret(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedServiceAccount', function() {
      it('should call deleteCollectionNamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedServiceAccount
        //instance.deleteCollectionNamespacedServiceAccount(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNode', function() {
      it('should call deleteCollectionNode successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNode
        //instance.deleteCollectionNode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionPersistentVolume', function() {
      it('should call deleteCollectionPersistentVolume successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionPersistentVolume
        //instance.deleteCollectionPersistentVolume(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespace', function() {
      it('should call deleteNamespace successfully', function(done) {
        //uncomment below and update the code to test deleteNamespace
        //instance.deleteNamespace(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedConfigMap', function() {
      it('should call deleteNamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedConfigMap
        //instance.deleteNamespacedConfigMap(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedEndpoints', function() {
      it('should call deleteNamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedEndpoints
        //instance.deleteNamespacedEndpoints(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedEvent', function() {
      it('should call deleteNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedEvent
        //instance.deleteNamespacedEvent(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedLimitRange', function() {
      it('should call deleteNamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedLimitRange
        //instance.deleteNamespacedLimitRange(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedPersistentVolumeClaim', function() {
      it('should call deleteNamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedPersistentVolumeClaim
        //instance.deleteNamespacedPersistentVolumeClaim(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedPod', function() {
      it('should call deleteNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedPod
        //instance.deleteNamespacedPod(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedPodTemplate', function() {
      it('should call deleteNamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedPodTemplate
        //instance.deleteNamespacedPodTemplate(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedReplicationController', function() {
      it('should call deleteNamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedReplicationController
        //instance.deleteNamespacedReplicationController(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedResourceQuota', function() {
      it('should call deleteNamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedResourceQuota
        //instance.deleteNamespacedResourceQuota(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedSecret', function() {
      it('should call deleteNamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedSecret
        //instance.deleteNamespacedSecret(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedService', function() {
      it('should call deleteNamespacedService successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedService
        //instance.deleteNamespacedService(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedServiceAccount', function() {
      it('should call deleteNamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedServiceAccount
        //instance.deleteNamespacedServiceAccount(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNode', function() {
      it('should call deleteNode successfully', function(done) {
        //uncomment below and update the code to test deleteNode
        //instance.deleteNode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePersistentVolume', function() {
      it('should call deletePersistentVolume successfully', function(done) {
        //uncomment below and update the code to test deletePersistentVolume
        //instance.deletePersistentVolume(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAPIResources', function() {
      it('should call getAPIResources successfully', function(done) {
        //uncomment below and update the code to test getAPIResources
        //instance.getAPIResources(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listComponentStatus', function() {
      it('should call listComponentStatus successfully', function(done) {
        //uncomment below and update the code to test listComponentStatus
        //instance.listComponentStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConfigMapForAllNamespaces', function() {
      it('should call listConfigMapForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listConfigMapForAllNamespaces
        //instance.listConfigMapForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEndpointsForAllNamespaces', function() {
      it('should call listEndpointsForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listEndpointsForAllNamespaces
        //instance.listEndpointsForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEventForAllNamespaces', function() {
      it('should call listEventForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listEventForAllNamespaces
        //instance.listEventForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLimitRangeForAllNamespaces', function() {
      it('should call listLimitRangeForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listLimitRangeForAllNamespaces
        //instance.listLimitRangeForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespace', function() {
      it('should call listNamespace successfully', function(done) {
        //uncomment below and update the code to test listNamespace
        //instance.listNamespace(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedConfigMap', function() {
      it('should call listNamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test listNamespacedConfigMap
        //instance.listNamespacedConfigMap(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedEndpoints', function() {
      it('should call listNamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test listNamespacedEndpoints
        //instance.listNamespacedEndpoints(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedEvent', function() {
      it('should call listNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test listNamespacedEvent
        //instance.listNamespacedEvent(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedLimitRange', function() {
      it('should call listNamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test listNamespacedLimitRange
        //instance.listNamespacedLimitRange(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedPersistentVolumeClaim', function() {
      it('should call listNamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test listNamespacedPersistentVolumeClaim
        //instance.listNamespacedPersistentVolumeClaim(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedPod', function() {
      it('should call listNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test listNamespacedPod
        //instance.listNamespacedPod(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedPodTemplate', function() {
      it('should call listNamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test listNamespacedPodTemplate
        //instance.listNamespacedPodTemplate(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedReplicationController', function() {
      it('should call listNamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test listNamespacedReplicationController
        //instance.listNamespacedReplicationController(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedResourceQuota', function() {
      it('should call listNamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test listNamespacedResourceQuota
        //instance.listNamespacedResourceQuota(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedSecret', function() {
      it('should call listNamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test listNamespacedSecret
        //instance.listNamespacedSecret(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedService', function() {
      it('should call listNamespacedService successfully', function(done) {
        //uncomment below and update the code to test listNamespacedService
        //instance.listNamespacedService(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedServiceAccount', function() {
      it('should call listNamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test listNamespacedServiceAccount
        //instance.listNamespacedServiceAccount(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNode', function() {
      it('should call listNode successfully', function(done) {
        //uncomment below and update the code to test listNode
        //instance.listNode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPersistentVolume', function() {
      it('should call listPersistentVolume successfully', function(done) {
        //uncomment below and update the code to test listPersistentVolume
        //instance.listPersistentVolume(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPersistentVolumeClaimForAllNamespaces', function() {
      it('should call listPersistentVolumeClaimForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listPersistentVolumeClaimForAllNamespaces
        //instance.listPersistentVolumeClaimForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPodForAllNamespaces', function() {
      it('should call listPodForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listPodForAllNamespaces
        //instance.listPodForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPodTemplateForAllNamespaces', function() {
      it('should call listPodTemplateForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listPodTemplateForAllNamespaces
        //instance.listPodTemplateForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listReplicationControllerForAllNamespaces', function() {
      it('should call listReplicationControllerForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listReplicationControllerForAllNamespaces
        //instance.listReplicationControllerForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listResourceQuotaForAllNamespaces', function() {
      it('should call listResourceQuotaForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listResourceQuotaForAllNamespaces
        //instance.listResourceQuotaForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSecretForAllNamespaces', function() {
      it('should call listSecretForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listSecretForAllNamespaces
        //instance.listSecretForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listServiceAccountForAllNamespaces', function() {
      it('should call listServiceAccountForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listServiceAccountForAllNamespaces
        //instance.listServiceAccountForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listServiceForAllNamespaces', function() {
      it('should call listServiceForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listServiceForAllNamespaces
        //instance.listServiceForAllNamespaces(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespace', function() {
      it('should call patchNamespace successfully', function(done) {
        //uncomment below and update the code to test patchNamespace
        //instance.patchNamespace(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespaceStatus', function() {
      it('should call patchNamespaceStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespaceStatus
        //instance.patchNamespaceStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedConfigMap', function() {
      it('should call patchNamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedConfigMap
        //instance.patchNamespacedConfigMap(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedEndpoints', function() {
      it('should call patchNamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedEndpoints
        //instance.patchNamespacedEndpoints(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedEvent', function() {
      it('should call patchNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedEvent
        //instance.patchNamespacedEvent(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedLimitRange', function() {
      it('should call patchNamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedLimitRange
        //instance.patchNamespacedLimitRange(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedPersistentVolumeClaim', function() {
      it('should call patchNamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedPersistentVolumeClaim
        //instance.patchNamespacedPersistentVolumeClaim(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedPersistentVolumeClaimStatus', function() {
      it('should call patchNamespacedPersistentVolumeClaimStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedPersistentVolumeClaimStatus
        //instance.patchNamespacedPersistentVolumeClaimStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedPod', function() {
      it('should call patchNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedPod
        //instance.patchNamespacedPod(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedPodStatus', function() {
      it('should call patchNamespacedPodStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedPodStatus
        //instance.patchNamespacedPodStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedPodTemplate', function() {
      it('should call patchNamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedPodTemplate
        //instance.patchNamespacedPodTemplate(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedReplicationController', function() {
      it('should call patchNamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedReplicationController
        //instance.patchNamespacedReplicationController(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedReplicationControllerStatus', function() {
      it('should call patchNamespacedReplicationControllerStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedReplicationControllerStatus
        //instance.patchNamespacedReplicationControllerStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedResourceQuota', function() {
      it('should call patchNamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedResourceQuota
        //instance.patchNamespacedResourceQuota(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedResourceQuotaStatus', function() {
      it('should call patchNamespacedResourceQuotaStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedResourceQuotaStatus
        //instance.patchNamespacedResourceQuotaStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedScaleScale', function() {
      it('should call patchNamespacedScaleScale successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedScaleScale
        //instance.patchNamespacedScaleScale(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedSecret', function() {
      it('should call patchNamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedSecret
        //instance.patchNamespacedSecret(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedService', function() {
      it('should call patchNamespacedService successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedService
        //instance.patchNamespacedService(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedServiceAccount', function() {
      it('should call patchNamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedServiceAccount
        //instance.patchNamespacedServiceAccount(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedServiceStatus', function() {
      it('should call patchNamespacedServiceStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedServiceStatus
        //instance.patchNamespacedServiceStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNode', function() {
      it('should call patchNode successfully', function(done) {
        //uncomment below and update the code to test patchNode
        //instance.patchNode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNodeStatus', function() {
      it('should call patchNodeStatus successfully', function(done) {
        //uncomment below and update the code to test patchNodeStatus
        //instance.patchNodeStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchPersistentVolume', function() {
      it('should call patchPersistentVolume successfully', function(done) {
        //uncomment below and update the code to test patchPersistentVolume
        //instance.patchPersistentVolume(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchPersistentVolumeStatus', function() {
      it('should call patchPersistentVolumeStatus successfully', function(done) {
        //uncomment below and update the code to test patchPersistentVolumeStatus
        //instance.patchPersistentVolumeStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyDELETENamespacedPod', function() {
      it('should call proxyDELETENamespacedPod successfully', function(done) {
        //uncomment below and update the code to test proxyDELETENamespacedPod
        //instance.proxyDELETENamespacedPod(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyDELETENamespacedPodWithPath', function() {
      it('should call proxyDELETENamespacedPodWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyDELETENamespacedPodWithPath
        //instance.proxyDELETENamespacedPodWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyDELETENamespacedService', function() {
      it('should call proxyDELETENamespacedService successfully', function(done) {
        //uncomment below and update the code to test proxyDELETENamespacedService
        //instance.proxyDELETENamespacedService(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyDELETENamespacedServiceWithPath', function() {
      it('should call proxyDELETENamespacedServiceWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyDELETENamespacedServiceWithPath
        //instance.proxyDELETENamespacedServiceWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyDELETENode', function() {
      it('should call proxyDELETENode successfully', function(done) {
        //uncomment below and update the code to test proxyDELETENode
        //instance.proxyDELETENode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyDELETENodeWithPath', function() {
      it('should call proxyDELETENodeWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyDELETENodeWithPath
        //instance.proxyDELETENodeWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyGETNamespacedPod', function() {
      it('should call proxyGETNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test proxyGETNamespacedPod
        //instance.proxyGETNamespacedPod(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyGETNamespacedPodWithPath', function() {
      it('should call proxyGETNamespacedPodWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyGETNamespacedPodWithPath
        //instance.proxyGETNamespacedPodWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyGETNamespacedService', function() {
      it('should call proxyGETNamespacedService successfully', function(done) {
        //uncomment below and update the code to test proxyGETNamespacedService
        //instance.proxyGETNamespacedService(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyGETNamespacedServiceWithPath', function() {
      it('should call proxyGETNamespacedServiceWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyGETNamespacedServiceWithPath
        //instance.proxyGETNamespacedServiceWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyGETNode', function() {
      it('should call proxyGETNode successfully', function(done) {
        //uncomment below and update the code to test proxyGETNode
        //instance.proxyGETNode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyGETNodeWithPath', function() {
      it('should call proxyGETNodeWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyGETNodeWithPath
        //instance.proxyGETNodeWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyHEADNamespacedPod', function() {
      it('should call proxyHEADNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test proxyHEADNamespacedPod
        //instance.proxyHEADNamespacedPod(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyHEADNamespacedPodWithPath', function() {
      it('should call proxyHEADNamespacedPodWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyHEADNamespacedPodWithPath
        //instance.proxyHEADNamespacedPodWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyHEADNamespacedService', function() {
      it('should call proxyHEADNamespacedService successfully', function(done) {
        //uncomment below and update the code to test proxyHEADNamespacedService
        //instance.proxyHEADNamespacedService(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyHEADNamespacedServiceWithPath', function() {
      it('should call proxyHEADNamespacedServiceWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyHEADNamespacedServiceWithPath
        //instance.proxyHEADNamespacedServiceWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyHEADNode', function() {
      it('should call proxyHEADNode successfully', function(done) {
        //uncomment below and update the code to test proxyHEADNode
        //instance.proxyHEADNode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyHEADNodeWithPath', function() {
      it('should call proxyHEADNodeWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyHEADNodeWithPath
        //instance.proxyHEADNodeWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyOPTIONSNamespacedPod', function() {
      it('should call proxyOPTIONSNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test proxyOPTIONSNamespacedPod
        //instance.proxyOPTIONSNamespacedPod(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyOPTIONSNamespacedPodWithPath', function() {
      it('should call proxyOPTIONSNamespacedPodWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyOPTIONSNamespacedPodWithPath
        //instance.proxyOPTIONSNamespacedPodWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyOPTIONSNamespacedService', function() {
      it('should call proxyOPTIONSNamespacedService successfully', function(done) {
        //uncomment below and update the code to test proxyOPTIONSNamespacedService
        //instance.proxyOPTIONSNamespacedService(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyOPTIONSNamespacedServiceWithPath', function() {
      it('should call proxyOPTIONSNamespacedServiceWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyOPTIONSNamespacedServiceWithPath
        //instance.proxyOPTIONSNamespacedServiceWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyOPTIONSNode', function() {
      it('should call proxyOPTIONSNode successfully', function(done) {
        //uncomment below and update the code to test proxyOPTIONSNode
        //instance.proxyOPTIONSNode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyOPTIONSNodeWithPath', function() {
      it('should call proxyOPTIONSNodeWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyOPTIONSNodeWithPath
        //instance.proxyOPTIONSNodeWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPATCHNamespacedPod', function() {
      it('should call proxyPATCHNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test proxyPATCHNamespacedPod
        //instance.proxyPATCHNamespacedPod(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPATCHNamespacedPodWithPath', function() {
      it('should call proxyPATCHNamespacedPodWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyPATCHNamespacedPodWithPath
        //instance.proxyPATCHNamespacedPodWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPATCHNamespacedService', function() {
      it('should call proxyPATCHNamespacedService successfully', function(done) {
        //uncomment below and update the code to test proxyPATCHNamespacedService
        //instance.proxyPATCHNamespacedService(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPATCHNamespacedServiceWithPath', function() {
      it('should call proxyPATCHNamespacedServiceWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyPATCHNamespacedServiceWithPath
        //instance.proxyPATCHNamespacedServiceWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPATCHNode', function() {
      it('should call proxyPATCHNode successfully', function(done) {
        //uncomment below and update the code to test proxyPATCHNode
        //instance.proxyPATCHNode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPATCHNodeWithPath', function() {
      it('should call proxyPATCHNodeWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyPATCHNodeWithPath
        //instance.proxyPATCHNodeWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPOSTNamespacedPod', function() {
      it('should call proxyPOSTNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test proxyPOSTNamespacedPod
        //instance.proxyPOSTNamespacedPod(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPOSTNamespacedPodWithPath', function() {
      it('should call proxyPOSTNamespacedPodWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyPOSTNamespacedPodWithPath
        //instance.proxyPOSTNamespacedPodWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPOSTNamespacedService', function() {
      it('should call proxyPOSTNamespacedService successfully', function(done) {
        //uncomment below and update the code to test proxyPOSTNamespacedService
        //instance.proxyPOSTNamespacedService(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPOSTNamespacedServiceWithPath', function() {
      it('should call proxyPOSTNamespacedServiceWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyPOSTNamespacedServiceWithPath
        //instance.proxyPOSTNamespacedServiceWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPOSTNode', function() {
      it('should call proxyPOSTNode successfully', function(done) {
        //uncomment below and update the code to test proxyPOSTNode
        //instance.proxyPOSTNode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPOSTNodeWithPath', function() {
      it('should call proxyPOSTNodeWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyPOSTNodeWithPath
        //instance.proxyPOSTNodeWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPUTNamespacedPod', function() {
      it('should call proxyPUTNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test proxyPUTNamespacedPod
        //instance.proxyPUTNamespacedPod(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPUTNamespacedPodWithPath', function() {
      it('should call proxyPUTNamespacedPodWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyPUTNamespacedPodWithPath
        //instance.proxyPUTNamespacedPodWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPUTNamespacedService', function() {
      it('should call proxyPUTNamespacedService successfully', function(done) {
        //uncomment below and update the code to test proxyPUTNamespacedService
        //instance.proxyPUTNamespacedService(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPUTNamespacedServiceWithPath', function() {
      it('should call proxyPUTNamespacedServiceWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyPUTNamespacedServiceWithPath
        //instance.proxyPUTNamespacedServiceWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPUTNode', function() {
      it('should call proxyPUTNode successfully', function(done) {
        //uncomment below and update the code to test proxyPUTNode
        //instance.proxyPUTNode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyPUTNodeWithPath', function() {
      it('should call proxyPUTNodeWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyPUTNodeWithPath
        //instance.proxyPUTNodeWithPath(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readComponentStatus', function() {
      it('should call readComponentStatus successfully', function(done) {
        //uncomment below and update the code to test readComponentStatus
        //instance.readComponentStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespace', function() {
      it('should call readNamespace successfully', function(done) {
        //uncomment below and update the code to test readNamespace
        //instance.readNamespace(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespaceStatus', function() {
      it('should call readNamespaceStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespaceStatus
        //instance.readNamespaceStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedConfigMap', function() {
      it('should call readNamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test readNamespacedConfigMap
        //instance.readNamespacedConfigMap(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedEndpoints', function() {
      it('should call readNamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test readNamespacedEndpoints
        //instance.readNamespacedEndpoints(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedEvent', function() {
      it('should call readNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test readNamespacedEvent
        //instance.readNamespacedEvent(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedLimitRange', function() {
      it('should call readNamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test readNamespacedLimitRange
        //instance.readNamespacedLimitRange(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedPersistentVolumeClaim', function() {
      it('should call readNamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test readNamespacedPersistentVolumeClaim
        //instance.readNamespacedPersistentVolumeClaim(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedPersistentVolumeClaimStatus', function() {
      it('should call readNamespacedPersistentVolumeClaimStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedPersistentVolumeClaimStatus
        //instance.readNamespacedPersistentVolumeClaimStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedPod', function() {
      it('should call readNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test readNamespacedPod
        //instance.readNamespacedPod(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedPodLog', function() {
      it('should call readNamespacedPodLog successfully', function(done) {
        //uncomment below and update the code to test readNamespacedPodLog
        //instance.readNamespacedPodLog(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedPodStatus', function() {
      it('should call readNamespacedPodStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedPodStatus
        //instance.readNamespacedPodStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedPodTemplate', function() {
      it('should call readNamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test readNamespacedPodTemplate
        //instance.readNamespacedPodTemplate(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedReplicationController', function() {
      it('should call readNamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test readNamespacedReplicationController
        //instance.readNamespacedReplicationController(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedReplicationControllerStatus', function() {
      it('should call readNamespacedReplicationControllerStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedReplicationControllerStatus
        //instance.readNamespacedReplicationControllerStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedResourceQuota', function() {
      it('should call readNamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test readNamespacedResourceQuota
        //instance.readNamespacedResourceQuota(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedResourceQuotaStatus', function() {
      it('should call readNamespacedResourceQuotaStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedResourceQuotaStatus
        //instance.readNamespacedResourceQuotaStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedScaleScale', function() {
      it('should call readNamespacedScaleScale successfully', function(done) {
        //uncomment below and update the code to test readNamespacedScaleScale
        //instance.readNamespacedScaleScale(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedSecret', function() {
      it('should call readNamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test readNamespacedSecret
        //instance.readNamespacedSecret(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedService', function() {
      it('should call readNamespacedService successfully', function(done) {
        //uncomment below and update the code to test readNamespacedService
        //instance.readNamespacedService(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedServiceAccount', function() {
      it('should call readNamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test readNamespacedServiceAccount
        //instance.readNamespacedServiceAccount(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedServiceStatus', function() {
      it('should call readNamespacedServiceStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedServiceStatus
        //instance.readNamespacedServiceStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNode', function() {
      it('should call readNode successfully', function(done) {
        //uncomment below and update the code to test readNode
        //instance.readNode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNodeStatus', function() {
      it('should call readNodeStatus successfully', function(done) {
        //uncomment below and update the code to test readNodeStatus
        //instance.readNodeStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readPersistentVolume', function() {
      it('should call readPersistentVolume successfully', function(done) {
        //uncomment below and update the code to test readPersistentVolume
        //instance.readPersistentVolume(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readPersistentVolumeStatus', function() {
      it('should call readPersistentVolumeStatus successfully', function(done) {
        //uncomment below and update the code to test readPersistentVolumeStatus
        //instance.readPersistentVolumeStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespace', function() {
      it('should call replaceNamespace successfully', function(done) {
        //uncomment below and update the code to test replaceNamespace
        //instance.replaceNamespace(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespaceFinalize', function() {
      it('should call replaceNamespaceFinalize successfully', function(done) {
        //uncomment below and update the code to test replaceNamespaceFinalize
        //instance.replaceNamespaceFinalize(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespaceStatus', function() {
      it('should call replaceNamespaceStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespaceStatus
        //instance.replaceNamespaceStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedConfigMap', function() {
      it('should call replaceNamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedConfigMap
        //instance.replaceNamespacedConfigMap(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedEndpoints', function() {
      it('should call replaceNamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedEndpoints
        //instance.replaceNamespacedEndpoints(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedEvent', function() {
      it('should call replaceNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedEvent
        //instance.replaceNamespacedEvent(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedLimitRange', function() {
      it('should call replaceNamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedLimitRange
        //instance.replaceNamespacedLimitRange(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedPersistentVolumeClaim', function() {
      it('should call replaceNamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedPersistentVolumeClaim
        //instance.replaceNamespacedPersistentVolumeClaim(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedPersistentVolumeClaimStatus', function() {
      it('should call replaceNamespacedPersistentVolumeClaimStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedPersistentVolumeClaimStatus
        //instance.replaceNamespacedPersistentVolumeClaimStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedPod', function() {
      it('should call replaceNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedPod
        //instance.replaceNamespacedPod(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedPodStatus', function() {
      it('should call replaceNamespacedPodStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedPodStatus
        //instance.replaceNamespacedPodStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedPodTemplate', function() {
      it('should call replaceNamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedPodTemplate
        //instance.replaceNamespacedPodTemplate(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedReplicationController', function() {
      it('should call replaceNamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedReplicationController
        //instance.replaceNamespacedReplicationController(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedReplicationControllerStatus', function() {
      it('should call replaceNamespacedReplicationControllerStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedReplicationControllerStatus
        //instance.replaceNamespacedReplicationControllerStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedResourceQuota', function() {
      it('should call replaceNamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedResourceQuota
        //instance.replaceNamespacedResourceQuota(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedResourceQuotaStatus', function() {
      it('should call replaceNamespacedResourceQuotaStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedResourceQuotaStatus
        //instance.replaceNamespacedResourceQuotaStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedScaleScale', function() {
      it('should call replaceNamespacedScaleScale successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedScaleScale
        //instance.replaceNamespacedScaleScale(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedSecret', function() {
      it('should call replaceNamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedSecret
        //instance.replaceNamespacedSecret(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedService', function() {
      it('should call replaceNamespacedService successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedService
        //instance.replaceNamespacedService(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedServiceAccount', function() {
      it('should call replaceNamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedServiceAccount
        //instance.replaceNamespacedServiceAccount(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedServiceStatus', function() {
      it('should call replaceNamespacedServiceStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedServiceStatus
        //instance.replaceNamespacedServiceStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNode', function() {
      it('should call replaceNode successfully', function(done) {
        //uncomment below and update the code to test replaceNode
        //instance.replaceNode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNodeStatus', function() {
      it('should call replaceNodeStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNodeStatus
        //instance.replaceNodeStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replacePersistentVolume', function() {
      it('should call replacePersistentVolume successfully', function(done) {
        //uncomment below and update the code to test replacePersistentVolume
        //instance.replacePersistentVolume(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replacePersistentVolumeStatus', function() {
      it('should call replacePersistentVolumeStatus successfully', function(done) {
        //uncomment below and update the code to test replacePersistentVolumeStatus
        //instance.replacePersistentVolumeStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
