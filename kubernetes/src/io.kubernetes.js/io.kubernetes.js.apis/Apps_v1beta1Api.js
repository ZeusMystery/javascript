/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.6.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['io.kubernetes.js/ApiClient', 'io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment', 'io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1DeploymentList', 'io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1DeploymentRollback', 'io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Scale', 'io.kubernetes.js/io.kubernetes.js.models/V1APIResourceList', 'io.kubernetes.js/io.kubernetes.js.models/V1DeleteOptions', 'io.kubernetes.js/io.kubernetes.js.models/V1Status', 'io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet', 'io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSetList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../io.kubernetes.js.models/AppsV1beta1Deployment'), require('../io.kubernetes.js.models/AppsV1beta1DeploymentList'), require('../io.kubernetes.js.models/AppsV1beta1DeploymentRollback'), require('../io.kubernetes.js.models/AppsV1beta1Scale'), require('../io.kubernetes.js.models/V1APIResourceList'), require('../io.kubernetes.js.models/V1DeleteOptions'), require('../io.kubernetes.js.models/V1Status'), require('../io.kubernetes.js.models/V1beta1StatefulSet'), require('../io.kubernetes.js.models/V1beta1StatefulSetList'));
  } else {
    // Browser globals (root is window)
    if (!root.KubernetesJsClient) {
      root.KubernetesJsClient = {};
    }
    root.KubernetesJsClient.Apps_v1beta1Api = factory(root.KubernetesJsClient.ApiClient, root.KubernetesJsClient.AppsV1beta1Deployment, root.KubernetesJsClient.AppsV1beta1DeploymentList, root.KubernetesJsClient.AppsV1beta1DeploymentRollback, root.KubernetesJsClient.AppsV1beta1Scale, root.KubernetesJsClient.V1APIResourceList, root.KubernetesJsClient.V1DeleteOptions, root.KubernetesJsClient.V1Status, root.KubernetesJsClient.V1beta1StatefulSet, root.KubernetesJsClient.V1beta1StatefulSetList);
  }
}(this, function(ApiClient, AppsV1beta1Deployment, AppsV1beta1DeploymentList, AppsV1beta1DeploymentRollback, AppsV1beta1Scale, V1APIResourceList, V1DeleteOptions, V1Status, V1beta1StatefulSet, V1beta1StatefulSetList) {
  'use strict';

  /**
   * Apps_v1beta1 service.
   * @module io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api
   * @version 1.0.0-snapshot
   */

  /**
   * Constructs a new Apps_v1beta1Api. 
   * @alias module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api
   * @class
   * @param {module:io.kubernetes.js/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:io.kubernetes.js/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createNamespacedDeployment operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~createNamespacedDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~createNamespacedDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment}
     */
    this.createNamespacedDeployment = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling createNamespacedDeployment");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createNamespacedDeployment");
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = AppsV1beta1Deployment;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/deployments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNamespacedDeploymentRollbackRollback operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~createNamespacedDeploymentRollbackRollbackCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1DeploymentRollback} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create rollback of a DeploymentRollback
     * @param {String} name name of the DeploymentRollback
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1DeploymentRollback} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~createNamespacedDeploymentRollbackRollbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1DeploymentRollback}
     */
    this.createNamespacedDeploymentRollbackRollback = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling createNamespacedDeploymentRollbackRollback");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling createNamespacedDeploymentRollbackRollback");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createNamespacedDeploymentRollbackRollback");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = AppsV1beta1DeploymentRollback;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/rollback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNamespacedStatefulSet operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~createNamespacedStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~createNamespacedStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet}
     */
    this.createNamespacedStatefulSet = function(namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling createNamespacedStatefulSet");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createNamespacedStatefulSet");
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1StatefulSet;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollectionNamespacedDeployment operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~deleteCollectionNamespacedDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~deleteCollectionNamespacedDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1Status}
     */
    this.deleteCollectionNamespacedDeployment = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteCollectionNamespacedDeployment");
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Status;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/deployments', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollectionNamespacedStatefulSet operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~deleteCollectionNamespacedStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~deleteCollectionNamespacedStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1Status}
     */
    this.deleteCollectionNamespacedStatefulSet = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteCollectionNamespacedStatefulSet");
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Status;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNamespacedDeployment operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~deleteNamespacedDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a Deployment
     * @param {String} name name of the Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {String} opts.propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~deleteNamespacedDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1Status}
     */
    this.deleteNamespacedDeployment = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling deleteNamespacedDeployment");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteNamespacedDeployment");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling deleteNamespacedDeployment");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents'],
        'propagationPolicy': opts['propagationPolicy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Status;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNamespacedStatefulSet operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~deleteNamespacedStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a StatefulSet
     * @param {String} name name of the StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {String} opts.propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~deleteNamespacedStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1Status}
     */
    this.deleteNamespacedStatefulSet = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling deleteNamespacedStatefulSet");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteNamespacedStatefulSet");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling deleteNamespacedStatefulSet");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents'],
        'propagationPolicy': opts['propagationPolicy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1Status;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAPIResources operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~getAPIResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1APIResourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get available resources
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~getAPIResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1APIResourceList}
     */
    this.getAPIResources = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1APIResourceList;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeploymentForAllNamespaces operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~listDeploymentForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1DeploymentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Deployment
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~listDeploymentForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1DeploymentList}
     */
    this.listDeploymentForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = AppsV1beta1DeploymentList;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listNamespacedDeployment operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~listNamespacedDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1DeploymentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~listNamespacedDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1DeploymentList}
     */
    this.listNamespacedDeployment = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling listNamespacedDeployment");
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = AppsV1beta1DeploymentList;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listNamespacedStatefulSet operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~listNamespacedStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~listNamespacedStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSetList}
     */
    this.listNamespacedStatefulSet = function(namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling listNamespacedStatefulSet");
      }


      var pathParams = {
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1StatefulSetList;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listStatefulSetForAllNamespaces operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~listStatefulSetForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind StatefulSet
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~listStatefulSetForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSetList}
     */
    this.listStatefulSetForAllNamespaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      var returnType = V1beta1StatefulSetList;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/statefulsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchNamespacedDeployment operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~patchNamespacedDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Deployment
     * @param {String} name name of the Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~patchNamespacedDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment}
     */
    this.patchNamespacedDeployment = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling patchNamespacedDeployment");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchNamespacedDeployment");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchNamespacedDeployment");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = AppsV1beta1Deployment;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchNamespacedDeploymentStatus operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~patchNamespacedDeploymentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified Deployment
     * @param {String} name name of the Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~patchNamespacedDeploymentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment}
     */
    this.patchNamespacedDeploymentStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling patchNamespacedDeploymentStatus");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchNamespacedDeploymentStatus");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchNamespacedDeploymentStatus");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = AppsV1beta1Deployment;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchNamespacedScaleScale operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~patchNamespacedScaleScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Scale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update scale of the specified Scale
     * @param {String} name name of the Scale
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~patchNamespacedScaleScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Scale}
     */
    this.patchNamespacedScaleScale = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling patchNamespacedScaleScale");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchNamespacedScaleScale");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchNamespacedScaleScale");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = AppsV1beta1Scale;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchNamespacedStatefulSet operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~patchNamespacedStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified StatefulSet
     * @param {String} name name of the StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~patchNamespacedStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet}
     */
    this.patchNamespacedStatefulSet = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling patchNamespacedStatefulSet");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchNamespacedStatefulSet");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchNamespacedStatefulSet");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1StatefulSet;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchNamespacedStatefulSetStatus operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~patchNamespacedStatefulSetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified StatefulSet
     * @param {String} name name of the StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~patchNamespacedStatefulSetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet}
     */
    this.patchNamespacedStatefulSetStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling patchNamespacedStatefulSetStatus");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchNamespacedStatefulSetStatus");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling patchNamespacedStatefulSetStatus");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1StatefulSet;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readNamespacedDeployment operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~readNamespacedDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Deployment
     * @param {String} name name of the Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~readNamespacedDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment}
     */
    this.readNamespacedDeployment = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling readNamespacedDeployment");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling readNamespacedDeployment");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = AppsV1beta1Deployment;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readNamespacedDeploymentStatus operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~readNamespacedDeploymentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified Deployment
     * @param {String} name name of the Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~readNamespacedDeploymentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment}
     */
    this.readNamespacedDeploymentStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling readNamespacedDeploymentStatus");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling readNamespacedDeploymentStatus");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = AppsV1beta1Deployment;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readNamespacedScaleScale operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~readNamespacedScaleScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Scale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read scale of the specified Scale
     * @param {String} name name of the Scale
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~readNamespacedScaleScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Scale}
     */
    this.readNamespacedScaleScale = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling readNamespacedScaleScale");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling readNamespacedScaleScale");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = AppsV1beta1Scale;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readNamespacedStatefulSet operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~readNamespacedStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified StatefulSet
     * @param {String} name name of the StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~readNamespacedStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet}
     */
    this.readNamespacedStatefulSet = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling readNamespacedStatefulSet");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling readNamespacedStatefulSet");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1StatefulSet;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readNamespacedStatefulSetStatus operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~readNamespacedStatefulSetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified StatefulSet
     * @param {String} name name of the StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~readNamespacedStatefulSetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet}
     */
    this.readNamespacedStatefulSetStatus = function(name, namespace, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling readNamespacedStatefulSetStatus");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling readNamespacedStatefulSetStatus");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1StatefulSet;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceNamespacedDeployment operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~replaceNamespacedDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Deployment
     * @param {String} name name of the Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~replaceNamespacedDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment}
     */
    this.replaceNamespacedDeployment = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling replaceNamespacedDeployment");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceNamespacedDeployment");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling replaceNamespacedDeployment");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = AppsV1beta1Deployment;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceNamespacedDeploymentStatus operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~replaceNamespacedDeploymentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified Deployment
     * @param {String} name name of the Deployment
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~replaceNamespacedDeploymentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Deployment}
     */
    this.replaceNamespacedDeploymentStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling replaceNamespacedDeploymentStatus");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceNamespacedDeploymentStatus");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling replaceNamespacedDeploymentStatus");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = AppsV1beta1Deployment;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceNamespacedScaleScale operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~replaceNamespacedScaleScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Scale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace scale of the specified Scale
     * @param {String} name name of the Scale
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Scale} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~replaceNamespacedScaleScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/AppsV1beta1Scale}
     */
    this.replaceNamespacedScaleScale = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling replaceNamespacedScaleScale");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceNamespacedScaleScale");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling replaceNamespacedScaleScale");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = AppsV1beta1Scale;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceNamespacedStatefulSet operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~replaceNamespacedStatefulSetCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified StatefulSet
     * @param {String} name name of the StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~replaceNamespacedStatefulSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet}
     */
    this.replaceNamespacedStatefulSet = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling replaceNamespacedStatefulSet");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceNamespacedStatefulSet");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling replaceNamespacedStatefulSet");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1StatefulSet;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceNamespacedStatefulSetStatus operation.
     * @callback module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~replaceNamespacedStatefulSetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified StatefulSet
     * @param {String} name name of the StatefulSet
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:io.kubernetes.js/io.kubernetes.js.apis/Apps_v1beta1Api~replaceNamespacedStatefulSetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:io.kubernetes.js/io.kubernetes.js.models/V1beta1StatefulSet}
     */
    this.replaceNamespacedStatefulSetStatus = function(name, namespace, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling replaceNamespacedStatefulSetStatus");
      }

      // verify the required parameter 'namespace' is set
      if (namespace == undefined || namespace == null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceNamespacedStatefulSetStatus");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling replaceNamespacedStatefulSetStatus");
      }


      var pathParams = {
        'name': name,
        'namespace': namespace
      };
      var queryParams = {
        'pretty': opts['pretty']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerToken'];
      var contentTypes = ['*/*'];
      var accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      var returnType = V1beta1StatefulSet;

      return this.apiClient.callApi(
        '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
