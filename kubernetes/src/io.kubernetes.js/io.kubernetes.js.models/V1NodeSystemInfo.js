/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.6.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['io.kubernetes.js/ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.KubernetesJsClient) {
      root.KubernetesJsClient = {};
    }
    root.KubernetesJsClient.V1NodeSystemInfo = factory(root.KubernetesJsClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The V1NodeSystemInfo model module.
   * @module io.kubernetes.js/io.kubernetes.js.models/V1NodeSystemInfo
   * @version 1.0.0-snapshot
   */

  /**
   * Constructs a new <code>V1NodeSystemInfo</code>.
   * NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
   * @alias module:io.kubernetes.js/io.kubernetes.js.models/V1NodeSystemInfo
   * @class
   * @param architecture {String} The Architecture reported by the node
   * @param bootID {String} Boot ID reported by the node.
   * @param containerRuntimeVersion {String} ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
   * @param kernelVersion {String} Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
   * @param kubeProxyVersion {String} KubeProxy Version reported by the node.
   * @param kubeletVersion {String} Kubelet Version reported by the node.
   * @param machineID {String} MachineID reported by the node. For unique machine identification in the cluster this field is prefered. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
   * @param operatingSystem {String} The Operating System reported by the node
   * @param osImage {String} OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
   * @param systemUUID {String} SystemUUID reported by the node. For unique machine identification MachineID is prefered. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html
   */
  var exports = function(architecture, bootID, containerRuntimeVersion, kernelVersion, kubeProxyVersion, kubeletVersion, machineID, operatingSystem, osImage, systemUUID) {
    var _this = this;

    _this['architecture'] = architecture;
    _this['bootID'] = bootID;
    _this['containerRuntimeVersion'] = containerRuntimeVersion;
    _this['kernelVersion'] = kernelVersion;
    _this['kubeProxyVersion'] = kubeProxyVersion;
    _this['kubeletVersion'] = kubeletVersion;
    _this['machineID'] = machineID;
    _this['operatingSystem'] = operatingSystem;
    _this['osImage'] = osImage;
    _this['systemUUID'] = systemUUID;
  };

  /**
   * Constructs a <code>V1NodeSystemInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:io.kubernetes.js/io.kubernetes.js.models/V1NodeSystemInfo} obj Optional instance to populate.
   * @return {module:io.kubernetes.js/io.kubernetes.js.models/V1NodeSystemInfo} The populated <code>V1NodeSystemInfo</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('architecture')) {
        obj['architecture'] = ApiClient.convertToType(data['architecture'], 'String');
      }
      if (data.hasOwnProperty('bootID')) {
        obj['bootID'] = ApiClient.convertToType(data['bootID'], 'String');
      }
      if (data.hasOwnProperty('containerRuntimeVersion')) {
        obj['containerRuntimeVersion'] = ApiClient.convertToType(data['containerRuntimeVersion'], 'String');
      }
      if (data.hasOwnProperty('kernelVersion')) {
        obj['kernelVersion'] = ApiClient.convertToType(data['kernelVersion'], 'String');
      }
      if (data.hasOwnProperty('kubeProxyVersion')) {
        obj['kubeProxyVersion'] = ApiClient.convertToType(data['kubeProxyVersion'], 'String');
      }
      if (data.hasOwnProperty('kubeletVersion')) {
        obj['kubeletVersion'] = ApiClient.convertToType(data['kubeletVersion'], 'String');
      }
      if (data.hasOwnProperty('machineID')) {
        obj['machineID'] = ApiClient.convertToType(data['machineID'], 'String');
      }
      if (data.hasOwnProperty('operatingSystem')) {
        obj['operatingSystem'] = ApiClient.convertToType(data['operatingSystem'], 'String');
      }
      if (data.hasOwnProperty('osImage')) {
        obj['osImage'] = ApiClient.convertToType(data['osImage'], 'String');
      }
      if (data.hasOwnProperty('systemUUID')) {
        obj['systemUUID'] = ApiClient.convertToType(data['systemUUID'], 'String');
      }
    }
    return obj;
  }

  /**
   * The Architecture reported by the node
   * @member {String} architecture
   */
  exports.prototype['architecture'] = undefined;
  /**
   * Boot ID reported by the node.
   * @member {String} bootID
   */
  exports.prototype['bootID'] = undefined;
  /**
   * ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
   * @member {String} containerRuntimeVersion
   */
  exports.prototype['containerRuntimeVersion'] = undefined;
  /**
   * Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
   * @member {String} kernelVersion
   */
  exports.prototype['kernelVersion'] = undefined;
  /**
   * KubeProxy Version reported by the node.
   * @member {String} kubeProxyVersion
   */
  exports.prototype['kubeProxyVersion'] = undefined;
  /**
   * Kubelet Version reported by the node.
   * @member {String} kubeletVersion
   */
  exports.prototype['kubeletVersion'] = undefined;
  /**
   * MachineID reported by the node. For unique machine identification in the cluster this field is prefered. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
   * @member {String} machineID
   */
  exports.prototype['machineID'] = undefined;
  /**
   * The Operating System reported by the node
   * @member {String} operatingSystem
   */
  exports.prototype['operatingSystem'] = undefined;
  /**
   * OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
   * @member {String} osImage
   */
  exports.prototype['osImage'] = undefined;
  /**
   * SystemUUID reported by the node. For unique machine identification MachineID is prefered. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html
   * @member {String} systemUUID
   */
  exports.prototype['systemUUID'] = undefined;



  return exports;
}));


